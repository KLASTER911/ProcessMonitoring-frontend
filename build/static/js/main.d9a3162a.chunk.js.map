{"version":3,"sources":["main.js","App.js","index.js"],"names":["url","ProcessTable","state","items","this","getStatuses","setInterval","fetch","method","then","response","json","setState","console","log","body","mode","JSON","stringify","headers","action","forEach","element","push","process","ProcData","LineChart","width","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","Line","data","name","uv","type","stroke","activeDot","r","item","index","style","color","status","class","onClick","manageNode","String","className","map","tbString","allProcessJSON","getProcData","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9a3162a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.css';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip,Legend} from 'recharts';\r\n\r\nconst port = 3030;\r\nconst host =\"http://192.168.0.218\";\r\nconst url = `${host}:${port}`;\r\nclass ProcessTable extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            items: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.getStatuses()\r\n        setInterval(()=>this.getStatuses(),5000)\r\n    }\r\n    getStatuses(){\r\n        let response = fetch(`${url}\\\\data`,{method:'GET'})\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n            this.setState({items:response})\r\n            console.log('response',response);\r\n        })\r\n        console.log('state:',this.state.items)\r\n    }\r\n    manageNode(body) {\r\n        console.log('body',body)\r\n        fetch(`${url}\\\\data`, {\r\n        method: 'POST',\r\n        mode: 'no-cors',\r\n        body: JSON.stringify(body), // данные могут быть 'строкой' или {объектом}!\r\n        headers: {'Content-Type': 'application/json'},\r\n        });\r\n            }\r\n    allProcessJSON(action){\r\n        let body = [];\r\n        this.state.items.forEach(element=>{\r\n            body.push({'process':element.process,'action':action})\r\n        })\r\n        return body\r\n    }\r\n    getProcData(ProcData){\r\n        var data = [\r\n            {name: 'Page A', uv: 4000},\r\n            {name: 'Page B', uv: 3000},\r\n            {name: 'Page C', uv: 2000},\r\n            {name: 'Page D', uv: 2780},\r\n            {name: 'Page E', uv: 1890},\r\n      ];\r\n      const data2 = [\r\n            {name: 'Page A', pv: 2400, amt: 2400},\r\n            {name: 'Page B', pv: 1398, amt: 2210},\r\n            {name: 'Page C', pv: 9800, amt: 2290},\r\n            {name: 'Page D', pv: 3908, amt: 2000},\r\n      ];\r\n        const renderLineChart = (\r\n            <LineChart width={600} height={300} \r\n            margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n       <XAxis dataKey=\"name\"/>\r\n       <YAxis/>\r\n       <CartesianGrid strokeDasharray=\"3 3\"/>\r\n       <Tooltip/>\r\n       <Legend />\r\n       <Line data={data} type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\r\n      </LineChart>\r\n        )\r\n                        return renderLineChart;\r\n    }\r\n\r\n    \r\n    tbString(item,index){\r\n        var tbStr = (\r\n        <tr key={index}>\r\n            <td>{index+1}</td>\r\n            <td>{item.process}</td>\r\n            <td style={{ color: item.status === 'stopped'? 'red':'green' }}>{item.status}</td>\r\n            <td><button class=\"btn mx-1 btn-outline-success\" onClick = {()=>this.manageNode([{'process':String(item.process), 'action':\"start\"}])}>Запустить</button>\r\n            <button class=\"btn mx-1 btn-outline-danger\" onClick = {()=>this.manageNode([{'process':String(item.process), 'action':\"stop\"}])}>Остановить</button>\r\n            <button class=\"btn mx-1 btn-outline-dark\" onClick = {()=>this.manageNode([{'process':String(item.process), 'action':\"restart\"}])}>Перезапустить</button></td>\r\n        </tr>)\r\n\r\n        return tbStr\r\n    }\r\n    render(){\r\n        return(\r\n        <div className = 'tb posleft'>\r\n            <table className=\"table table-bordered\">\r\n                <thead className='thead-dark'>\r\n                    <tr>\r\n                        <th>№</th>\r\n                        <th>NodeName</th>\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.items.map((item, index) =>(\r\n                        this.tbString(item,index)\r\n                    ))}\r\n                </tbody>\r\n        </table>    \r\n                <button class=\"btn mx-1 btn-outline-success\" onClick = {()=> this.manageNode(this.allProcessJSON('start'))}>Запустить ноды</button>\r\n                <button class=\"btn mx-1 btn-outline-danger\" onClick = {()=> this.manageNode(this.allProcessJSON('stop'))}>Остановить ноды</button>\r\n                <button class=\"btn mx-1 btn-outline-dark\"  onClick = {()=> this.manageNode(this.allProcessJSON('restart'))}>Перезапустить ноды</button>\r\n                <button class=\"btn mx-1 btn-outline-primary\" onClick = {()=>this.getStatuses()}>Обновить статусы нод</button>\r\n        <div>{this.getProcData()}</div>\r\n        </div>)\r\n        }\r\n    }\r\n    \r\nexport default ProcessTable;\r\n","import './App.css';\nimport ProcessTable from './main.js';\nfunction App() {\n  return (\n    <div className = 'ProcessTable'>\n      {<ProcessTable/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}